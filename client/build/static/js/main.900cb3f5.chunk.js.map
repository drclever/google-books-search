{"version":3,"sources":["utils/API.js","components/Jumbotron/index.js","components/Grid/index.js","components/SearchForm/index.js","components/SearchResult/index.js","pages/SearchBooks.js","components/SavedResult/index.js","pages/SavedBooks.js","pages/NoMatch.js","components/Navbar/index.js","App.js","registerServiceWorker.js","index.js"],"names":["query","axios","get","savedBooks","post","id","delete","Jumbotron","children","className","Container","fluid","Row","Col","size","split","map","join","SearchForm","props","value","search","type","name","placeholder","onChange","handleInputChange","onClick","handleFormSubmit","SearchResult","books","length","book","href","link","target","rel","event","handleSavedButton","title","key","_id","src","image","alt","authors","description","SearchBooks","Component","state","error","message","this","setState","trim","preventDefault","API","then","res","data","items","console","log","Error","results","result","volumeInfo","imageLinks","thumbnail","infoLink","catch","err","alert","filter","render","SavedResult","savedbook","handleDeleteButton","Moment","date","format","SavedBook","componentDidMount","NoMatch","role","aria-label","Navbar","App","Switch","Route","exact","path","component","SavedBooks","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.900cb3f5.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    // Get book from google search \r\n    getSearch: function(query) {\r\n        return axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + query)\r\n    },\r\n\r\n    // Gets all books\r\n    getBooks: function () {\r\n        return axios.get(\"/api/books\");\r\n    },\r\n\r\n    // Gets the book with the given id\r\n    getBook: function (id) {\r\n        return axios.get(\"/api/books/\" + id);\r\n    },\r\n\r\n    // Saves a book to the database\r\n    saveBook: function (savedBooks) {\r\n        return axios.post(\"/api/books\", savedBooks);\r\n    },\r\n\r\n    // Deletes the book with the given id\r\n    deleteBook: function (id) {\r\n        return axios.delete(\"/api/books/\" + id);\r\n    }\r\n}","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron({ children }) {\r\n    return (\r\n        <div className=\"jumbotron d-flex align-items-center\">\r\n            <div className=\"container text-center\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\n// Exporting the Container, Row, and Col components from this file\r\n\r\n// This Container component allows us to use a bootstrap container without worrying about class names\r\nexport function Container({ fluid, children }) {\r\n    return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Row component lets us use a bootstrap row without having to think about class names\r\nexport function Row({ fluid, children }) {\r\n    return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Col component lets us size bootstrap columns with less syntax\r\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\r\nexport function Col({ size, children }) {\r\n    return (\r\n        <div\r\n            className={size\r\n                .split(\" \")\r\n                .map(size => \"col-\" + size)\r\n                .join(\" \")}\r\n        >\r\n            {children}\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst SearchForm = props => {\r\n    return (\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <label className=\"BookSearchLabel\"><h3>Search For Books</h3></label>\r\n                <br></br>\r\n                <input className=\"col-12 form-control\"\r\n                    value={props.search}\r\n                    type=\"text\"\r\n                    name=\"searchBook\"\r\n                    placeholder=\"Enter Search Term\"\r\n                    onChange={props.handleInputChange}\r\n                />\r\n            </div>\r\n            <button type=\"submit\" className=\"submitBtn btn btn-primary\" onClick={props.handleFormSubmit}>\r\n                Submit\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchForm","import React from \"react\";\r\nimport \"./style.css\";\r\nimport {Row, Col} from \"../Grid\"\r\n\r\nconst SearchResult = props => {\r\n    return (props.books.length === 0) ? (\r\n        <div className=\"card\">\r\n            <div className=\"card-body player\">\r\n                <div className=\"article\">\r\n                    <h3>Search Results</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ) : (\r\n            <div className=\"card\">\r\n                <div className=\"card-body player\">\r\n                    <div className=\"article\">\r\n                        <h3>Search Results</h3>\r\n                        {props.books.map(book => {\r\n                            return (\r\n                                <li className=\"search-list list-group-item\">\r\n                                    <Row className=\"buttonDiv \">\r\n                                        <a href={book.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                            <button className=\"viewBook btn btn-success\">\r\n                                                Preview\r\n                                            </button>\r\n                                        </a>\r\n                                        <button className=\"saveBook btn btn-primary\" id={book.id} onClick={(event) => props.handleSavedButton(event)}>\r\n                                            Save\r\n                                        </button>\r\n                                    </Row>\r\n                                    <br></br>\r\n                                    <Row className=\"SearchResult row\" id={book.title + \"Card\"} key={book._id}>\r\n                                        <Col size=\"2\" className=\"bookImage\">\r\n                                            <img src={book.image} alt={book.title} />\r\n                                        </Col>\r\n                                        <Col size=\"1\" className=\"emptyCol\"/>\r\n                                        <Col size=\"9\" className=\"bookInfo\">\r\n                                            <Row>\r\n                                                <h3 className=\"bookTitle\">{book.title}</h3>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <h4 className=\"bookAuthor\">{book.authors}</h4>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <p className=\"bookDescription\">{book.description}</p>\r\n                                            </Row>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default SearchResult","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport { Container, Row, Col } from \"../components/Grid\";\r\nimport SearchForm from \"../components/SearchForm\";\r\nimport SearchResult from \"../components/SearchResult\"\r\n\r\n\r\nclass SearchBooks extends Component {\r\n    //create state\r\n    state = {\r\n        search: \"\",\r\n        books: [],\r\n        error: \"\",\r\n        message: \"\"\r\n    };\r\n\r\n    //function to take value of what enter in the search bar\r\n    handleInputChange = event => {\r\n        this.setState({ search: event.target.value.trim() })\r\n    }\r\n\r\n    //function to control the submit button of the search form \r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        // once it clicks it connects to the google book api with the search value\r\n       API.getSearch(this.state.search)\r\n            .then(res => {\r\n                if (res.data.items === \"error\") {\r\n                    console.log(\"Error from getSearch\")\r\n                    throw new Error(res.data.items);\r\n                }\r\n                else {\r\n                    // store response in a array\r\n                    let results = res.data.items\r\n                    //map through the array \r\n                    results = results.map(result => {\r\n                        //Test to see if imageLink exists.  If not, then create a no cover thumbnail. \r\n                        if (typeof result.volumeInfo.imageLinks == \"undefined\") {\r\n                            result.volumeInfo.imageLinks = {thumbnail: \"https://books.google.com/googlebooks/images/no_cover_thumb.gif\"};\r\n                        } \r\n\r\n                        //store each book information in a new object \r\n                        result = {\r\n                            key: result.id,\r\n                            id: result.id,\r\n                            title: result.volumeInfo.title,\r\n                            authors: result.volumeInfo.authors,\r\n                            description: result.volumeInfo.description,\r\n                            image: result.volumeInfo.imageLinks.thumbnail,\r\n                            link: result.volumeInfo.infoLink\r\n                        }\r\n\r\n                        return result;\r\n                    })\r\n                    // set the state of the books array to the new arrays of objects with properties getting back from the response\r\n\r\n                    this.setState({ books: results, error: \"\" })\r\n\r\n                }\r\n            })\r\n            .catch(err => {\r\n                alert(\"No Books Found, Try a Different Query\")\r\n                this.setState({ \r\n                    books: [],\r\n                    error: \"No Books Found, Try a Different Query\" \r\n                })\r\n            });\r\n    }\r\n\r\n    handleSavedButton = event => {\r\n        event.preventDefault();\r\n        let savedBooks = this.state.books.filter(book => book.id === event.target.id)\r\n        savedBooks = savedBooks[0];\r\n        API.saveBook(savedBooks)\r\n            .then(this.setState({ message: alert(\"Book saved\") }))\r\n            .catch(err => console.log(err))\r\n    }\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n                <Jumbotron>\r\n                    <h1 className=\"text-white\">Google Book Search</h1>\r\n                    <br></br>\r\n                    <h2 className=\"text-white\">Search for Books and Save Them</h2>\r\n                </Jumbotron>\r\n                <Container>\r\n                    <Row>\r\n                        <Col size=\"12\">\r\n                            <SearchForm\r\n                                handleFormSubmit={this.handleFormSubmit}\r\n                                handleInputChange={this.handleInputChange}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <br></br>\r\n                <Container>\r\n                    <SearchResult books={this.state.books} handleSavedButton={this.handleSavedButton} />\r\n                </Container>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default SearchBooks","import React from \"react\";\r\nimport \"./style.css\";\r\nimport {Row, Col} from \"../Grid\";\r\nimport Moment from \"moment\";\r\n\r\nconst SavedResult = props => {\r\n    return (props.savedBooks.length === 0) ? (\r\n        <div className=\"card\">\r\n            <div className=\"card-body player\">\r\n                <div className=\"article\">\r\n                    <h3>Saved Books</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ):(\r\n        <div className=\"card\">\r\n            <div className=\"card-body player\">\r\n                <div className=\"article\">\r\n                    <h3>Saved Books</h3>\r\n                    {props.savedBooks.map(savedbook => {\r\n                        return (\r\n                            <li className=\"saved-list list-group-item\">\r\n                                <Row className=\"buttonDiv \">\r\n                                    <button className=\"deleteBook btn btn-danger\" id={savedbook._id} onClick={() => props.handleDeleteButton(savedbook._id)}>\r\n                                        Delete\r\n                                    </button>\r\n                                    <a href={savedbook.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                        <button className=\"viewBook btn btn-success\">\r\n                                            Preview\r\n                                        </button>\r\n                                    </a>\r\n                                </Row>\r\n                                <br></br>\r\n                                <Row className=\"SearchResult\" id={savedbook.title + \"Card\"} key={savedbook._id}>\r\n                                    <Col size=\"2\" className=\"bookImage\">\r\n                                        <img src={savedbook.image} alt={savedbook.title} />\r\n                                    </Col>\r\n                                    <Col size=\"1\" className=\"emptyCol\"/>\r\n                                    <Col size=\"9\" className=\"bookInfo\">\r\n                                        <Row>\r\n                                            <h2 className=\"bookTitle\">{savedbook.title}</h2>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <h3 className=\"bookAuthor\">{savedbook.authors}</h3>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <p className=\"bookDescription\">{savedbook.description}</p>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <p className=\"bookDate\">Date Saved {Moment(savedbook.date).format('YYYY-MM-DD')}</p>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SavedResult","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport { Container} from \"../components/Grid\";\r\nimport SavedResult from \"../components/SavedResult\"\r\n\r\nclass SavedBook extends Component {\r\n    state = {\r\n        savedBooks: []\r\n    };\r\n\r\n    //when this component mounts, grab all books that were save to the database \r\n    componentDidMount() {\r\n        API.getBooks()\r\n            .then(res => this.setState({ savedBooks: res.data }))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    //function to remove book by id\r\n    handleDeleteButton = id => {\r\n        API.deleteBook(id)\r\n            .then(res => this.componentDidMount())\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid className=\"container\">\r\n                <Jumbotron>\r\n                    <h1 className=\"text-white\">Google Book Search</h1>\r\n                    <br></br>\r\n                    <h2 className=\"text-white\">Delete or Preview saved books</h2>\r\n                </Jumbotron>\r\n                <Container>\r\n                    <SavedResult savedBooks={this.state.savedBooks} handleDeleteButton={this.handleDeleteButton} />\r\n                </Container>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default SavedBook","import React from \"react\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nfunction NoMatch() {\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col size=\"md-12\">\r\n          <Jumbotron>\r\n            <h1>404 Page Not Found</h1>\r\n            <h1>\r\n              <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n                🙄\r\n              </span>\r\n            </h1>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default NoMatch;","import React from \"react\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-primary bg-info\">\r\n            <a className=\"navbar-brand\" href=\"/\">\r\n                <h2 className=\"text-white\">Google Books</h2>\r\n            </a>\r\n            <div id=\"navbarNav\">\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item\" id=\"home\">\r\n                        <a className=\"nav-link\" href=\"/\"><button type=\"button\" className=\"btn btn-primary text-white\">Search</button></a>\r\n                    </li>\r\n                    <li className=\"nav-item\" id=\"report\">\r\n                        <a className=\"nav-link\" href=\"/saved\"><button type=\"button\" className=\"btn btn-primary text-white\">Saved</button></a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport SearchBooks from \"./pages/SearchBooks\";\nimport SavedBooks from \"./pages/SavedBooks\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Navbar from \"./components/Navbar\";\nimport \"./App.css\"\n\n\nfunction App() {\n    return (\n        <Router>\n            <div>\n                <Navbar />\n                <Switch>\n                    <Route exact path=\"/\" component={SearchBooks} />\n                    <Route exact path=\"/saved\" component={SavedBooks} />\n                    <Route exact path=\"/saved/:id\" component={SavedBooks} />\n                    <Route component={NoMatch} /> \n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}